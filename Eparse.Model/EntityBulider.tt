<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ assembly name="$(SolutionDir)\Lib\MySql.Data.dll" #>
<#@ assembly name="$(SolutionDir)\Lib\MySql.Data.Entity.dll" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="MySql.Data.MySqlClient" #>

<#	// 生成配置
	// 是否生成所有表
	bool builderAll = true; 
	// 是否使用表名配置
	bool useTableNamesDictionary = true;
#>
<#	// 连接字符串,表结构查询语句
     string dbname="eparse";
    string musicStoreConnectionString = @"server=127.0.0.1;User Id=root;password=123456;database="+dbname+";Charset=utf8;port=3309";
	string getAllTableSchemaSqlTemplate = @"SELECT *,COLUMN_NAME as ColumnName,DATA_TYPE as dataType FROM INFORMATION_SCHEMA.COLUMNS  where table_name='{0}' and TABLE_SCHEMA='"+dbname+"'";
 #>
<#	// 设置要生成的当前数据库中所有的表名	
	Dictionary<string,string> tableNames=new Dictionary<string,string>();

#>
<#	// 获取当前数据库中所有的表名	
	if (builderAll == true )
	{  		
		using (MySqlConnection MySqlConnection1 = new MySqlConnection(musicStoreConnectionString))
		{
			// 获取所有用户表的查询语句
			string getAllTableNameSql = "SELECT TABLE_NAME,TABLE_COMMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'  AND TABLE_SCHEMA='"+dbname+"'";
		   MySqlCommand  MySqlCommand  = new MySqlCommand (getAllTableNameSql, MySqlConnection1);
			MySqlConnection1.Open();
			MySqlDataReader  reader = MySqlCommand .ExecuteReader();

			while (reader.Read())
			{
				string theTableName = reader["TABLE_NAME"] as string;
				if(useTableNamesDictionary == true)
				{
					if(tableNames.ContainsKey(theTableName)){
						continue;
					}
				}
				tableNames.Add(theTableName, reader["TABLE_COMMENT"] as string);
			}
		} 
	}
#>
/*
	以下代码为T4自动生成的代码，请不要擅自修改
	生成时间:<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff") #>
	生成机器：<#= Environment.MachineName #>
	author：xiaose
*/
using System;
using System.Collections.Generic; 
using System.Text;
using HelloData.FrameWork.Data;

 
<#	// 循环生成实体类
		foreach (string tableName in tableNames.Keys)
		{
#>
 
    /// <summary>
	///	<#=tableNames[tableName] #>
	/// </summary>
	[Serializable]
    public partial class <#=tableName #>: BaseEntity
    {
	  
<#	// 生成属性
			using (MySqlConnection MySqlConnection = new MySqlConnection(musicStoreConnectionString))
			{
				// 获取所有用户表的查询语句
				string getAllTableSchemaSql = string.Format(getAllTableSchemaSqlTemplate, tableName);
			  	MySqlCommand  MySqlCommand  = new MySqlCommand (getAllTableSchemaSql, MySqlConnection);
				MySqlConnection.Open();
				MySqlDataReader  reader = MySqlCommand .ExecuteReader();

				while (reader.Read())
				{
			     	bool iskey=reader["COLUMN_KEY"].ToString()!="";//是否为主键
					bool isnullable=reader["IS_NULLABLE"].ToString()=="NO";//不允许为空
					string dbDataType = reader["DATA_TYPE"] as string; // 数据库中使用的类型
					string dataType = string.Empty; // 数据类型
					
					switch (dbDataType)
					{
						case "decimal":
						case "numeric":
						case "money":
						case "smallmoney":
							if(isnullable)
								dataType="decimal";
							else
							    dataType = "decimal?";
							break;
						case "char":
						case "nchar":
						case "varchar":
						case "nvarchar":
						case "text":
							dataType = "string";
							break;
						case "double":
					     	if(isnullable)
								dataType="decimal";
							else
							    dataType = "decimal?";
							break;
						case "ntext":
							dataType = "string";
							break;
						case "uniqueidentifier":
							if(isnullable)
								dataType="Guid";
							else
							   dataType = "Guid?";
							break;
						case "bit":
							if(isnullable)
								dataType="bool";
							else	dataType = "bool?";
							break;
						case "real":
								if(isnullable)
								dataType="Single";
							else	dataType = "Single?";
							break;
						case "bigint":
								if(isnullable)
								dataType="long";
							else	dataType = "long?";
							break;
						case "int":
								if(isnullable)
								dataType="int";
							else	dataType = "int?";
							break;
						case "tinyint":
						case "smallint":
								if(isnullable)
								dataType="short";
							else	dataType = "short?";
							break;
						case "float":
								if(isnullable)
								dataType="float";
							else	dataType = "float?";
							break;
						case "date":
						case "datetime":
						case "datetime2":
						case "smalldatetime":
								if(isnullable)
								dataType="DateTime";
							else	dataType = "DateTime?";
							break;
						case "datetimeoffset ":
							dataType = "DateTimeOffset?";
							break;
						case "timeSpan ":
							dataType = "TimeSpan?";
							break;
						case "image":
						case "binary":
						case "varbinary":
							dataType = "byte[]";
							break;
						default:
					     	dataType = "string";
							break;
					}
#>
	    /// <summary>
		///	<#=(reader["COLUMN_COMMENT"] as string).Replace(Environment.NewLine,"").Replace("\n","").Replace("\r","").Replace(" ","")#>
		/// </summary>
<#
		if(!iskey)
		{
#> 		public <#=dataType #> <#=reader["ColumnName"] as string#> { get; set; }		
<#
}else
{
#>
        [Column(IsKeyProperty = true<#= (iskey?",AutoIncrement=true":"")#>)]
		public <#=dataType #> <#=reader["ColumnName"] as string#> { get; set; }	
		public  <#= tableName  #>()
        {
            base.SetIni(this,"<#=tableName #>","<#=reader["ColumnName"] as string#>");
        }	
<#
}

				}
				#>
				
		public static class Columns
		{
<#
				reader.Close();
				MySqlDataReader  reader1 = MySqlCommand .ExecuteReader();
			   while (reader1.Read())
				{
				
#>
			public const string <#=reader1["ColumnName"] as string#>="<#=reader1["ColumnName"] as string#>";					
<#
		}
#>
		}
				 
	}
				<#
		}
	}
 
 #>
 

